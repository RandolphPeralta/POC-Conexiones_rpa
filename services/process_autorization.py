
from services.autorizacion_service import check_authorization
from services.control_entregas_service import manage_delivery_control
from services.check_date_authorizations import check_date
import time
from datetime import datetime, timedelta
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By

from selenium.webdriver.remote.remote_connection import LOGGER
import logging

# Configurar nivel de logging
LOGGER.setLevel(logging.WARNING)
logging.basicConfig(level=logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)


def process_authorization(driver, wait, number, time_limit_minutes=2):
    """
    Procesa una autorizaci√≥n espec√≠fica, incluyendo su consulta y la gesti√≥n de entregas.

    La funci√≥n navega al m√≥dulo de autorizaciones, busca la autorizaci√≥n por su n√∫mero,
    verifica que su estado sea 'Autorizada' y, si es as√≠, procede con el control de entregas.
    Incorpora un l√≠mite de tiempo para cada procesamiento y reinicia el navegador
    si la autorizaci√≥n no est√° 'Autorizada' o si ocurre un error.

    Args:
        driver: Instancia de `webdriver` de Selenium, que representa el navegador.
        wait: Instancia de `WebDriverWait` de Selenium, utilizada para esperar
              condiciones espec√≠ficas de los elementos web.
        number (str): El n√∫mero de autorizaci√≥n a procesar.
        time_limit_minutes (int, optional): El tiempo m√°ximo en minutos permitido
                                            para procesar una autorizaci√≥n.
                                            Por defecto es 2 minutos.

    Returns:
        bool: Retorna `True` si la autorizaci√≥n fue procesada exitosamente (es decir,
              se encontr√≥ como 'Autorizada' y se gestion√≥ el control de entregas).
              Retorna `False` si la autorizaci√≥n no est√° 'Autorizada', si excede
              el tiempo l√≠mite, o si ocurre cualquier otro error durante el proceso.

    Raises:
        TimeoutException: Propagada desde las funciones internas de Selenium si un
                          elemento no se encuentra en el tiempo esperado.
        Exception: Captura y maneja cualquier otro error inesperado que pueda ocurrir
                   durante la ejecuci√≥n, imprimiendo un mensaje y retornando `False`.
    """
    start = datetime.now()
    time_limit = timedelta(minutes=time_limit_minutes)
    
    print(f"\nüîÅ Consultando autorizaci√≥n: {number}\n")
    
    try:
        # Volver a la p√°gina inicial para asegurar estado consistente
        time.sleep(0.5)
        #driver.get("https://conexiones.saviasaludeps.com/savia/home.faces")
        wait.until(EC.presence_of_element_located((By.TAG_NAME, "h3")))
        
        # Nuevo: obtener estado junto con √©xito
        exito = check_authorization(driver, wait, number)

        if not exito:
            print(f"‚ùå Fall√≥ consulta para {number}")
            return False

        #if estado.lower() != "autorizada":
        #    print(f"‚õî Estado no autorizado ({estado}) para {number}. Saltando...")
        #    return True  # No es error cr√≠tico, simplemente lo salta        
        
        
        # Consultar autorizaci√≥n
        #if not check_authorization(driver, wait, number):
        #    print(f"‚ùå Fall√≥ consulta para {number}")
        #    return False
            
        if datetime.now() - start > time_limit:
            print(f"‚è∞ Tiempo l√≠mite excedido para {number}")
            return False
            
        # Volver a cargar p√°gina antes de control de entregas
        #driver.get("https://conexiones.saviasaludeps.com/savia/home.faces")
        time.sleep(0.5)
        wait.until(EC.presence_of_element_located((By.TAG_NAME, "h3")))
        
        # Gestionar control de entregas
        if not manage_delivery_control(driver, wait, number):
            print(f"‚ùå Fall√≥ control de entregas para {number}")
            return False
        
        
        time.sleep(0.5)
        wait.until(EC.presence_of_element_located((By.TAG_NAME, "h3")))
        # Gestionar control de entregas
        if not check_date(driver, wait, number):
            print(f"‚ùå Fall√≥ control de fechas de entregas para {number}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error cr√≠tico al procesar {number}: {str(e)}")
        return False
    
    except Exception as e:
        print(f"‚ùå Error al procesar autorizaci√≥n {number}: {str(e)}")
        return False

